--- gdb-6.8.orig/gdb/symfile.c	2010-12-03 11:27:34.191176908 +0100
+++ gdb-6.8/gdb/symfile.c	2010-12-03 11:28:38.161176563 +0100
@@ -24,6 +24,8 @@
 #include "defs.h"
 #include "bfdlink.h"
 #include "symtab.h"
+#include "command.h"
+#include "gdbcmd.h"
 #include "gdbtypes.h"
 #include "gdbcore.h"
 #include "frame.h"
@@ -1396,6 +1398,18 @@
 		    value);
 }
 
+static const char *default_target_path = "/usr/targets/current/root/";
+static char *target_path;
+
+static void
+show_target_path (struct ui_file *file, int from_tty,
+		       struct cmd_list_element *c, const char *value)
+{
+  fprintf_filtered (file, _("\
+The directory path which is the top of the current target is \"%s\".\n"),
+		    value);
+}
+
 #if ! defined (DEBUG_SUBDIRECTORY)
 #define DEBUG_SUBDIRECTORY ".debug"
 #endif
@@ -1409,10 +1423,22 @@
   char *debugfile;
   char *name_copy;
   char *canon_name;
+  char *targetstop;
+  char *stripdir;
   bfd_size_type debuglink_size;
   unsigned long crc32;
   int i;
   struct build_id *build_id;
+  char *tmpenv;
+
+  tmpenv = getenv ("GDBTARGETPATH");
+  if (tmpenv)
+    target_path = savestring (tmpenv, strlen (tmpenv));
+  else if (!target_path)
+    {
+      target_path = (char *)default_target_path;
+    }
+  /* printf_filtered("(with target-path = '%s')", target_path);*/
 
   build_id = build_id_bfd_get (abfd);
   if (build_id != NULL)
@@ -1486,7 +1512,22 @@
   /* Then try in the global debugfile directory.  */
   strcpy (debugfile, debug_file_directory);
   strcat (debugfile, "/");
-  strcat (debugfile, dir);
+
+  targetstop = lrealpath (target_path);
+  if( strstr(dir,targetstop) == NULL )
+    {
+      /* no targets top path found: keep complete exec dir */
+      strcat (debugfile, dir);
+    }
+  else
+    {
+      /* strip the targets top path from exec dir */
+      stripdir = alloca (strlen (dir) + 1);
+      strncpy (stripdir, dir + strlen(targetstop), strlen(dir)) ;
+      stripdir[strlen(dir)-strlen(targetstop)] = '\0';
+      strcat (debugfile, stripdir);
+    }
+
   strcat (debugfile, basename);
 
   if (separate_debug_file_exists (debugfile, crc32))
@@ -4212,6 +4253,18 @@
   add_info ("extensions", info_ext_lang_command,
 	    _("All filename extensions associated with a source language."));
 
+  add_setshow_optional_filename_cmd ("target-path", class_support,
+				     &target_path, _("\
+Set the targets top directory where cross compiled files will be deployed."), _("\
+Show the directory where compiled files will be deployed.."), _("\
+This is used by the set debug-file-directory to find the right\n\
+debug symbols directory in case of deployment in a target zone.\n\
+When this option is unset, /usr/targets/current/root/ is the default\n\
+In case the GDBTARGETPATH environment variable is set, it is set to it."),
+				     NULL,
+				     show_target_path,
+				     &setlist, &showlist);
+
   add_setshow_optional_filename_cmd ("debug-file-directory", class_support,
 				     &debug_file_directory, _("\
 Set the directory where separate debug symbols are searched for."), _("\
