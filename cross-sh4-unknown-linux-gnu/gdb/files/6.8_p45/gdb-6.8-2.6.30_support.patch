Add support for 2.6.30 kernels.

Signed-off-by: Chris Smith <chris.smith@st.com>

Index: gdb-6.8/gdb/linux-awareness-sh4.c
===================================================================
--- gdb-6.8.orig/gdb/linux-awareness-sh4.c
+++ gdb-6.8/gdb/linux-awareness-sh4.c
@@ -79,6 +79,7 @@ DECLARE_FIELD(irq_desc,          action)
 DECLARE_FIELD(irq_desc,          handler);
 DECLARE_FIELD(irq_desc,          chip);
 DECLARE_FIELD(irq_desc,          name);
+DECLARE_FIELD(irq_desc,          kstat_irqs);
 DECLARE_FIELD(irqaction,         name);
 DECLARE_FIELD(irqaction,         next);
 DECLARE_FIELD(kernel_stat,       irqs);
@@ -282,13 +283,20 @@ interrupts_command (char *args, int from
 	CORE_ADDR action = extract_pointer_field (irq_descs + i*irq_desc_size,
 						  irq_desc, action);
 	CORE_ADDR name;
+	CORE_ADDR irqs_addr;
 	int count;
 
 	if (!action)
 	    continue;
 
-	count = read_memory_unsigned_integer (ADDR (per_cpu__kstat) + F_OFFSET (kernel_stat, irqs) + i*F_SIZE (kernel_stat, irqs)/nr_irqs,
+	if (detected_version < V2_6_30) {
+		count = read_memory_unsigned_integer (ADDR (per_cpu__kstat) + F_OFFSET (kernel_stat, irqs) + i*F_SIZE (kernel_stat, irqs)/nr_irqs,
 					      F_SIZE (kernel_stat, irqs)/nr_irqs);
+	} else {
+	    	irqs_addr = extract_pointer_field (irq_descs + i*irq_desc_size,
+						    irq_desc, kstat_irqs);
+		count = read_memory_integer(irqs_addr, 4);
+	}
 
 	printf_filtered ("%3d     %9u ", i, count);
 	if (detected_version >= V2_6_23) {
@@ -630,6 +638,7 @@ static int sh4_linux_awareness_check()
 	    && HAS_FIELD(thread_struct,     sp);
 	break;
     case V2_6_23:
+    case V2_6_30:
 	res =  HAS_FIELD(mm_struct,         pgd)
 	    && HAS_FIELD(task_struct,       stack)
 	    && HAS_FIELD(task_struct,       thread)
@@ -1381,7 +1390,7 @@ static CORE_ADDR  fetch_context_register
     read_memory(task_struct+F_OFFSET(task_struct, thread),
 		thread_struct_buffer, F_SIZE(task_struct, thread));
 
-    if (detected_version == V2_6_23)
+    if (detected_version >= V2_6_23)
 	read_memory(task_struct+F_OFFSET(task_struct, stack),
 		    thread_info_buffer, F_SIZE(task_struct, stack));
     else
Index: gdb-6.8/gdb/linux-awareness.c
===================================================================
--- gdb-6.8.orig/gdb/linux-awareness.c
+++ gdb-6.8/gdb/linux-awareness.c
@@ -5975,6 +5975,7 @@ static int linux_awareness_check()
     case V2_6_24:
     case V2_6_27:
     case V2_6_28:
+    case V2_6_30:
 	res =  HAS_FIELD(list_head,         next)
 	    && HAS_FIELD(pid_namespace,     last_pid)
 	    && HAS_FIELD(task_struct,       children)
@@ -6027,13 +6028,17 @@ linux_awareness_auto_activate (struct ob
 	/* Starting with 2.6.27, the Version_xxx variables are only
 	   available without CONFIG_KALLSYMS, which we can't require. */
     } else if (lookup_minimal_symbol("Version_132635", NULL, NULL)
-	       || (release != NULL && strncmp("2.6.27", release, 6))) {
+	       || (release != NULL && (strncmp("2.6.27", release, 6) == 0))) {
 	/* 2.6.27 version - For Nomadik ARM*/
 	detected_version = V2_6_27;
     } else if (lookup_minimal_symbol("Version_132636", NULL, NULL)
-	       || (release != NULL && strncmp("2.6.28", release, 6))) {
+	       || (release != NULL && (strncmp("2.6.28", release, 6) == 0))) {
 	/* 2.6.28 version - For Nomadik ARM*/
 	detected_version = V2_6_28;
+    } else if (lookup_minimal_symbol("Version_132638", NULL, NULL)
+	       || (release != NULL && (strncmp("2.6.30", release, 6) == 0))) {
+	/* 2.6.30 version*/
+	detected_version = V2_6_30;
     } else {
 	detected_version = VERSION_UNKNOWN;
 	if (! deprecated_call_command_chain)
Index: gdb-6.8/gdb/linux-awareness.h
===================================================================
--- gdb-6.8.orig/gdb/linux-awareness.h
+++ gdb-6.8/gdb/linux-awareness.h
@@ -105,6 +105,7 @@ extern enum stlinux_version {
     V2_6_24,
     V2_6_27,
     V2_6_28,
+    V2_6_30,
     VERSION_UNKNOWN
 } detected_version;
 
