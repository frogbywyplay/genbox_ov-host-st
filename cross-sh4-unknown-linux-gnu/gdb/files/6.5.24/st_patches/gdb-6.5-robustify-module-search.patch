Patch from Frédéric Riss <frederic.riss@st.com> to prevent gdb accidentally
picking up executables when looking for shared libraries, and to avoid
coredumps if for any reason an executable is still found.

Signed-off-by: Chris Smith <chris.smith@st.com>
Index: gdb-6.5/gdb/linux-awareness.c
===================================================================
--- gdb-6.5.orig/gdb/linux-awareness.c	2007-10-08 15:41:49.000000000 +0100
+++ gdb-6.5/gdb/linux-awareness.c	2007-10-08 15:41:53.000000000 +0100
@@ -2145,11 +2145,12 @@
 /* This function implements the walking of the decision tree
    representing all the possible names for the module names FILENAME. */
 static int
-try_to_open_alternate_names (char *filename, char **temp_pathname)
+try_to_open_alternate_names (char *file, char **temp_pathname)
 {
     int *tree;
     int nb_chars, allocated_chars;
     int level = 0;
+    char *filename;
 
     void add_char (int pos) {
 
@@ -2172,6 +2173,8 @@
 	}
     }
 
+    filename = alloca(strlen(file) + 1);
+    strcpy(filename, file);
     allocated_chars = 4;
     tree = xmalloc (sizeof (int)*4);
     nb_chars = 0;
@@ -2208,17 +2211,31 @@
 }
 
 static int
-linux_aware_find_and_open_solib(char *soname,
+linux_aware_find_and_open_solib(char *in_soname,
 				unsigned o_flags,
 				char **temp_pathname)
 {
     int found_file = -1;
     char realfile[SO_NAME_MAX_PATH_SIZE];
+    char soname[SO_NAME_MAX_PATH_SIZE];
     bfd *abfd;
     struct lm_info *lm_info;
     char *c;
+    strcpy (soname, in_soname+1);
+    soname[strlen(soname)-1] = '\0';
+
+    /* This hack tries to minimize the chance that GDB finds a binary
+       file named like the module in its default search (in
+       solib.c:solib_open).  */
+    if (*in_soname != '[' || in_soname[strlen(in_soname+1)] != ']') {
+	warning ("\
+linux_aware_find_and_open_solib: Passed module name wasn't generated by \
+linux_aware_so_ops!");
+	return -1;
+    }
 
-    snprintf (realfile, SO_NAME_MAX_PATH_SIZE, "%s.ko", soname);
+    strcpy(realfile, soname);
+    strcat(realfile, ".ko");
 
     while ((c = strchr(realfile, ',')))
 	*c = '_';
@@ -2229,12 +2246,11 @@
     found_file = try_to_open_alternate_names (realfile, temp_pathname);
 
     if ( found_file < 0 ) {
-	warning("\
+	error("\
 You just loaded the '%s' module.\n\
-The debugger searched for '%s.ko' in module-search-path,\n\
+The debugger searched for '%s' in module-search-path,\n\
 but didn't find the module file.\n\
-Current module-search-path is:\n%s\n", soname, soname, *module_search_path);
-	return found_file;
+Current module-search-path is:\n%s\n", soname, realfile, *module_search_path);
     }
 
     abfd = bfd_openr (*temp_pathname, gnutarget);
@@ -2252,7 +2268,7 @@
     lm_info = find_lm_info (soname);
     layout_sections (abfd, lm_info);
 
-    printf_filtered("[New module '%s' (%s)]\n", soname, *temp_pathname);
+    printf_unfiltered("[New module '%s' (%s)]\n", soname, *temp_pathname);
 
     if (! lm_info->needs_relocated_file ) {
 	bfd_close (abfd);
@@ -2284,6 +2300,13 @@
 	   so->so_name, sec->the_bfd_section->name,
 	   paddr (sec->addr), paddr (sec->endaddr));
 
+    if (so->lm_info->section_offsets == NULL)
+	error("\
+GDB has opened '%s' as the binary file for module '%s'.\
+This is certainly wrong, and will cause troubles for the rest of this \
+debugging session. Please move that file out of the way.",
+	      so->so_name, so->so_original_name);
+
     /* This one is in GDB's list */
     so->lm_info->mod = so;
 
@@ -2552,8 +2575,10 @@
 	res = cur;
 
 	cur->lm_info = list->info;
-	strcpy (cur->so_original_name, list->info->module_name);
-	strcpy (cur->so_name, list->info->module_name);
+	xsnprintf(cur->so_original_name, sizeof(cur->so_original_name),
+		  "[%s]", list->info->module_name);
+	xsnprintf(cur->so_name, sizeof(cur->so_name),
+		  "[%s]", list->info->module_name);
 
 	list = list->next;
     }
Index: gdb-6.5/gdb/solib.c
===================================================================
--- gdb-6.5.orig/gdb/solib.c	2007-10-08 15:41:48.000000000 +0100
+++ gdb-6.5/gdb/solib.c	2007-10-08 15:41:53.000000000 +0100
@@ -412,6 +412,11 @@
       if (from_tty)
 	printf_unfiltered (_("Symbols already loaded for %s\n"), so->so_name);
     }
+  else if (so->abfd == NULL)
+    {
+      if (from_tty)
+	printf_unfiltered (_("Symbol file not found for %s\n"), so->so_name);
+    }
   else
     {
       if (catch_errors (symbol_add_stub, so,
