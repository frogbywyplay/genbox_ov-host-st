STLinux fixes and tweaks for sts-armgdb support.

Signed-off-by: Chris Smith <chris.smith@st.com>

Index: fred/gdb/top.c
===================================================================
--- fred.orig/gdb/top.c	2009-01-29 10:05:42.000000000 +0000
+++ fred/gdb/top.c	2009-01-29 10:05:44.000000000 +0000
@@ -1242,7 +1242,7 @@
 }
 
 
-#define GDB_VERSION_STR1 "GNU gdb version 4.9 for "
+#define GDB_VERSION_STR1 "GNU gdb version 6.8"
 #define GDB_VERSION_STR2 "based on 6.8-ST-1.0"
 #ifndef ST_CORE_NAME
 #error "ST_CORE_NAME has not been set, check your Makefile.in"
Index: fred/gdb/remote-starm.c
===================================================================
--- fred.orig/gdb/remote-starm.c	2009-01-29 10:05:42.000000000 +0000
+++ fred/gdb/remote-starm.c	2009-01-29 10:05:44.000000000 +0000
@@ -204,6 +204,8 @@
   clear_proceed_status();
 
   targetRegistered = 1;
+
+  target_mark_exited(&gdbgdi_ops);
 }
 
 
@@ -954,7 +956,7 @@
   /* This target 'has stack' can be reseted by the stgdi layer */
   if (targetType == 2)
     {
-      target_has_stack = 1;
+      target_mark_running(&gdbgdi_ops);
       inferior_ptid = minus_one_ptid;
     }
 
@@ -1604,8 +1606,12 @@
   debug( "starm_observer_executable_changed\n");
 
   /* must make sure that if we're interrupted, symbols gets freed */
-  search_symbols ( NULL, FUNCTIONS_DOMAIN, 0, (char **) NULL, &symbols);
-  old_chain = make_cleanup_free_search_symbols (symbols);
+
+  /* This makes the kernel debugger unusable as it searches all the
+  symbols (which is many orders of magnetude more than in the simple
+  NMF examples... and it doesn't serve any purpose for us */
+  // search_symbols ( NULL, FUNCTIONS_DOMAIN, 0, (char **) NULL, &symbols);
+  //  old_chain = make_cleanup_free_search_symbols (symbols);
 
   /* // Debug
   for (p = symbols; p != NULL; p = p->next)
@@ -1619,7 +1625,7 @@
     }
    */
 
-  do_cleanups (old_chain);
+  //  do_cleanups (old_chain);
 }
 
 
Index: fred/gdb/remote-stgdi.c
===================================================================
--- fred.orig/gdb/remote-stgdi.c	2009-01-29 10:05:42.000000000 +0000
+++ fred/gdb/remote-stgdi.c	2009-01-29 10:05:44.000000000 +0000
@@ -2349,7 +2349,7 @@
     programLoadedOne = 1;
 
     /* take care of "info stack" before a run or a chip reset. */
-    target_has_stack = 0;
+    target_mark_exited(&gdbgdi_ops);
 }
 
 
@@ -2432,8 +2432,8 @@
 
   ARGV = argv;
 
-  /* Set target_has_stack. */
-  target_has_stack = 1;
+  /* Set target to be valid for checking the stack, registers etc. */
+  target_mark_running(&gdbgdi_ops);
 
   /* Needed to get correct instruction in cache */
   insert_breakpoints();
@@ -2622,6 +2622,8 @@
   get_current_regcache();
 
   reinit_frame_cache ();
+
+  target_mark_exited(&gdbgdi_ops);
 }
 
 
Index: fred/gdb/cli/cli-cmds.c
===================================================================
--- fred.orig/gdb/cli/cli-cmds.c	2009-01-29 10:05:42.000000000 +0000
+++ fred/gdb/cli/cli-cmds.c	2009-01-29 10:05:44.000000000 +0000
@@ -23,8 +23,8 @@
 #include <windows.h>
 #include <errno.h>
 #endif
-#include <math.h>
 #include "defs.h"
+#include <math.h>
 #include "readline/readline.h"
 #include "readline/tilde.h"
 #include "completer.h"
Index: fred/gdb/starm/STARM_Interface.cpp
===================================================================
--- fred.orig/gdb/starm/STARM_Interface.cpp	2009-01-29 10:05:42.000000000 +0000
+++ fred/gdb/starm/STARM_Interface.cpp	2009-01-29 10:05:44.000000000 +0000
@@ -21,6 +21,7 @@
  */
 
 #include <fcntl.h>
+#include <stdlib.h>
 #include <signal.h>
 #include <setjmp.h>
 
Index: fred/gdb/starm/STARM_armos.c
===================================================================
--- fred.orig/gdb/starm/STARM_armos.c	2009-01-29 10:05:42.000000000 +0000
+++ fred/gdb/starm/STARM_armos.c	2009-01-29 10:05:44.000000000 +0000
@@ -36,6 +36,7 @@
 #include "../../sim/arm/armos.h"
 #include "../../sim/arm/armemu.h"
 
+#include "STARM_Useful.h"
 #include "STARM_GdbInterface.h"
 
 #ifdef _REMOVED_BY_ST_ // remove by ST
Index: fred/gdb/stgdi/ST_Client.cpp
===================================================================
--- fred.orig/gdb/stgdi/ST_Client.cpp	2009-01-29 10:05:42.000000000 +0000
+++ fred/gdb/stgdi/ST_Client.cpp	2009-01-29 10:05:44.000000000 +0000
@@ -27,6 +27,7 @@
 #endif
 
 #include <signal.h>
+#include <stdlib.h>
 #ifdef WIN32
 #include <direct.h>
 #include <process.h>
Index: fred/gdb/stgdi/ST_GdiUseful.h
===================================================================
--- fred.orig/gdb/stgdi/ST_GdiUseful.h	2009-01-29 10:05:42.000000000 +0000
+++ fred/gdb/stgdi/ST_GdiUseful.h	2009-01-29 10:05:44.000000000 +0000
@@ -24,6 +24,7 @@
 #define ST_GDI_USEFUL_H
 
 // STL definitions
+#include "cstring"
 #include "string"
 #include "list"
 using namespace std;
Index: fred/gdb/stgdi/stgdi_interface.cpp
===================================================================
--- fred.orig/gdb/stgdi/stgdi_interface.cpp	2009-01-29 10:05:42.000000000 +0000
+++ fred/gdb/stgdi/stgdi_interface.cpp	2009-01-29 10:05:44.000000000 +0000
@@ -23,7 +23,7 @@
 	The stgdi_interface.cpp file contains the C function implementation
 	to connect a debugger to the stgdb_agent using C language.
 */
-
+#include <stdlib.h>
 #include "ST_ClientPipe.h"
 #include "stgdi_interface.h"
 
Index: fred/gdb/Makefile.in
===================================================================
--- fred.orig/gdb/Makefile.in	2009-01-29 10:05:18.000000000 +0000
+++ fred/gdb/Makefile.in	2009-01-29 10:07:30.000000000 +0000
@@ -3305,6 +3305,7 @@
 .SUFFIXES: .cpp .o
 
 stgdi/%.o: $(srcdir)/stgdi/%.cpp
+	@-mkdir stgdi 2> /dev/null
 	$(CC) -c -Wall $(CFLAGS) -D_REENTRANT -D_NO_DEBUGAGENT -D_GNU_SOURCE -D_NO_TRACE_SERVER -o $@ -I$(srcdir)/stgdi $<
 
 #
@@ -3316,9 +3317,11 @@
 .SUFFIXES: .cpp .o
 
 starm/%.o: $(srcdir)/starm/%.cpp
+	@-mkdir starm 2> /dev/null
 	$(CC) -c -Wall $(CFLAGS) -D_REENTRANT -D_NO_DEBUGAGENT -D_GNU_SOURCE -D_NO_TRACE_SERVER -o $@ -I$(srcdir) -I$(srcdir)/starm -I$(srcdir)/os21 $<
 
 starm/%.o: $(srcdir)/starm/%.c
+	@-mkdir starm 2> /dev/null
 	$(CC) -c -Wall $(INTERNAL_CFLAGS) -I$(srcdir) -o $@ -I$(srcdir)/starm $<
 
 #
@@ -3328,6 +3331,7 @@
 # or try to compile the object file into the sub-directory.
 
 %.o: $(srcdir)/os21/%.c
+	@-mkdir os21 2> /dev/null
 	$(CC) -c $(INTERNAL_CFLAGS) -I$(srcdir) -I$(srcdir)/os21 -o $@ $<
 
 
