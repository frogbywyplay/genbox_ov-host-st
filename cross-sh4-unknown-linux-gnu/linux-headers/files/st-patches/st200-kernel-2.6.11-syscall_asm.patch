Index: linux-st231-2.6.11.12_stm22-18/include/asm-st200/unistd.h
===================================================================
--- linux-st231-2.6.11.12_stm22-18.orig/include/asm-st200/unistd.h
+++ linux-st231-2.6.11.12_stm22-18/include/asm-st200/unistd.h
@@ -234,76 +234,220 @@
 
 #ifndef __ASSEMBLY__
 
-/* errno setting is handled in the _syscalln() code */
-#define __syscall_return(type, res) \
-do { \
-	return (type) (res); \
-} while (0)
 
-#ifdef __KERNEL_SYSCALLS__
+#define __syscall_return(type)			\
+do {					        \
+	if(_sc_err) {errno=_sc_res;_sc_res=-1;}	\
+	return (type) (_sc_res); \
+} while (0)
 
-#include <linux/compiler.h>
-#include <linux/types.h>
-#include <linux/linkage.h>
-#include <asm/ptrace.h>
-
-extern unsigned long __syscall0(unsigned long nr);
-extern unsigned long __syscall1(unsigned long p1, unsigned long nr);
-extern unsigned long __syscall2(unsigned long p1, unsigned long p2,
-				unsigned long nr);
-extern unsigned long __syscall3(unsigned long p1, unsigned long p2,
-				unsigned long p3, unsigned long nr);
-extern unsigned long __syscall4(unsigned long p1, unsigned long p2,
-				unsigned long p3, unsigned long p4,
-				unsigned long nr);
-
-#endif /* __KERNEL_SYSCALLS__ */
-
-#define _syscall0(type,name) \
-type name(void) \
-{ \
-	unsigned long __res; \
-	__res = __syscall0(__NR_##name); \
-	__syscall_return(type,__res); \
-}
-
-#define _syscall1(type,name,type1,arg1) \
-type name(type1 arg1) \
-{ \
-	unsigned long __res; \
-	__res = __syscall1((unsigned long)arg1, __NR_##name); \
-	__syscall_return(type,__res); \
+/* The full clobber list causes the compiler to generate
+ * dreadful code, but this should be OK because of where
+ * it is used, ie to generate functions
+ */
+#define __syscall_clobber                                         \
+                       "memory",                                        \
+                       "r8",  "r9",  "r10", "r11",               	\
+                                                                 "r23",	\
+                       "r24", "r25", "r26", "r27", "r28", "r29", "r30", \
+                       "r31", "r32", "r33", "r34", "r35", "r36", "r37", \
+                       "r38", "r39", "r40", "r41", "r42", "r43", "r44", \
+                       "r45", "r46", "r47", "r48", "r49", "r50", "r51", \
+                       "r52", "r53", "r54", "r55", "r56", "r57", "r58", \
+                       "r59", "r60", "r61", "r62",                      \
+                       "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7"
+
+
+#define __syscall_input0 "r" (_sc_num)
+#define __syscall_input1 __syscall_input0,"r" (_sc_arg1)
+#define __syscall_input2 __syscall_input1,"r" (_sc_arg2)
+#define __syscall_input3 __syscall_input2,"r" (_sc_arg3)
+#define __syscall_input4 __syscall_input3,"r" (_sc_arg4)
+#define __syscall_input5 __syscall_input4,"r" (_sc_arg5)
+#define __syscall_input6 __syscall_input5,"r" (_sc_arg6)
+
+
+#define _syscall0(type,name)			\
+type name(void)                                 \
+{                                               \
+	register long _sc_num asm("r15");       \
+	register long _sc_res;			\
+	register long _sc_err;			\
+        _sc_num = __NR_##name;			\
+	__asm__ volatile ("syscall 0 \n"	\
+			  ";; \n"		\
+			  "mfb %0 = $b0 \n"	\
+			  "mov %1 = $r16\n"     \
+			  ";;\n"		\
+			  :"=r" (_sc_err),"=r" (_sc_res) \
+			  : __syscall_input0    \
+                          : __syscall_clobber, "r16","r17","r18","r19","r20","r21","r22");	\
+	__syscall_return(type);			\
+}
+
+
+#define _syscall1(type,name,type1,arg1)		\
+type name(type1 arg1)                           \
+{                                               \
+	register long _sc_num asm("r15");	\
+	register long _sc_res;	                \
+	register long _sc_arg1 asm("r16");	\
+	register long _sc_err;			\
+        _sc_num = __NR_##name;			\
+	_sc_arg1 = (long)arg1;			\
+	__asm__ volatile ("syscall 0 \n"	\
+			  ";; \n"		\
+			  "mfb %0 = $b0 \n"	\
+			  "mov %1 = $r16\n"     \
+			  ";;\n"	        \
+			  :"=r" (_sc_err),"=r" (_sc_res)    \
+			  : __syscall_input1    \
+                          : __syscall_clobber,"r17","r18","r19","r20","r21","r22" );	\
+	__syscall_return(type);	                \
+}
+
+
+#define _syscall2(type,name,type1,arg1,type2,arg2)	\
+type name(type1 arg1,type2 arg2)    		        \
+{                                                       \
+	register long _sc_num asm("r15");		\
+	register long _sc_res;				\
+	register long _sc_arg1 asm("r16");		\
+	register long _sc_arg2 asm("r17");		\
+	register long _sc_err;		                \
+        _sc_num = __NR_##name;				\
+	_sc_arg1 = (long)arg1;                          \
+	_sc_arg2 = (long)arg2;                          \
+	__asm__ volatile ("syscall 0 \n"		\
+			  ";; \n"			\
+			  "mfb %0 = $b0 \n"		\
+			  "mov %1 = $r16\n"		\
+			  ";;\n"			\
+			  :"=r" (_sc_err),"=r" (_sc_res)	\
+                          : __syscall_input2             \
+			  : __syscall_clobber,"r18","r19","r20","r21","r22" ); \
+	__syscall_return(type);	                        \
+}
+
+
+
+#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3)		\
+type name(type1 arg1,type2 arg2,type3 arg3)			        \
+{                                                                       \
+	register long _sc_num asm("r15");				\
+	register long _sc_res;						\
+	register long _sc_arg1 asm("r16");				\
+	register long _sc_arg2 asm("r17");				\
+	register long _sc_arg3 asm("r18");				\
+	register long _sc_err;						\
+        _sc_num = __NR_##name;						\
+	_sc_arg1 = (long)arg1;						\
+	_sc_arg2 = (long)arg2;						\
+	_sc_arg3 = (long)arg3;						\
+	__asm__ volatile ("syscall 0 \n"				\
+			  ";; \n"					\
+			  "mfb %0 = $b0 \n"				\
+			  "mov %1 = $r16\n"				\
+			  ";;\n"					\
+			  :"=r" (_sc_err),"=r" (_sc_res)		\
+                          : __syscall_input3                             \
+			  : __syscall_clobber,"r19","r20","r21","r22" ); \
+	__syscall_return(type);						\
+}
+
+
+#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
+type name(type1 arg1,type2 arg2,type3 arg3,type4 arg4)   		\
+{                                                                       \
+	register long _sc_num asm("r15");				\
+	register long _sc_res;						\
+	register long _sc_arg1 asm("r16");				\
+	register long _sc_arg2 asm("r17");				\
+	register long _sc_arg3 asm("r18");				\
+	register long _sc_arg4 asm("r19");				\
+	register long _sc_err;						\
+        _sc_num = __NR_##name;						\
+	_sc_arg1 = (long)arg1;						\
+	_sc_arg2 = (long)arg2;						\
+	_sc_arg3 = (long)arg3;						\
+	_sc_arg4 = (long)arg4;						\
+	__asm__ volatile ("syscall 0 \n"				\
+			  ";; \n"					\
+			  "mfb %0 = $b0 \n"				\
+			  "mov %1 = $r16\n"				\
+			  ";;\n"					\
+			  :"=r" (_sc_err),"=r" (_sc_res)		\
+                          : __syscall_input4				\
+			  : __syscall_clobber,"r20","r21","r22"  );	\
+	__syscall_return(type);						\
+}
+
+
+
+#define _syscall5(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,type5,arg5) \
+type name(type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5)	\
+{                                                                       \
+	register long _sc_num asm("r15");				\
+	register long _sc_res;						\
+	register long _sc_arg1 asm("r16");				\
+	register long _sc_arg2 asm("r17");				\
+	register long _sc_arg3 asm("r18");				\
+	register long _sc_arg4 asm("r19");				\
+	register long _sc_arg5 asm("r20");				\
+	register long _sc_err;						\
+        _sc_num = __NR_##name;						\
+	_sc_arg1 = (long)arg1;						\
+	_sc_arg2 = (long)arg2;						\
+	_sc_arg3 = (long)arg3;						\
+	_sc_arg4 = (long)arg4;						\
+	_sc_arg5 = (long)arg5;						\
+	__asm__ volatile ("syscall 0 \n"				\
+			  ";; \n"					\
+			  "mfb %0 = $b0 \n"				\
+			  "mov %1 = $r16\n"				\
+			  ";;\n"					\
+			  :"=r" (_sc_err),"=r" (_sc_res)		\
+                          : __syscall_input5				\
+			  : __syscall_clobber,"r21","r22" );		\
+	__syscall_return(type);						\
+}
+
+#define _syscall6(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4,type5,arg5,type6,arg6) \
+type name(type1 arg1,type2 arg2,type3 arg3,type4 arg4,type5 arg5,type6 arg6) \
+{                                                                       \
+	register long _sc_num asm("r15");				\
+	register long _sc_res;						\
+	register long _sc_arg1 asm("r16");				\
+	register long _sc_arg2 asm("r17");				\
+	register long _sc_arg3 asm("r18");				\
+	register long _sc_arg4 asm("r19");				\
+	register long _sc_arg5 asm("r20");				\
+	register long _sc_arg6 asm("r21");				\
+	register long _sc_err;						\
+        _sc_num = __NR_##name;						\
+	_sc_arg1 = (long)arg1;						\
+	_sc_arg2 = (long)arg2;						\
+	_sc_arg3 = (long)arg3;						\
+	_sc_arg4 = (long)arg4;						\
+	_sc_arg5 = (long)arg5;						\
+	_sc_arg5 = (long)arg6;						\
+	__asm__ volatile ("syscall 0 \n"				\
+			  ";; \n"					\
+			  "mfb %0 = $b0 \n"				\
+			  "mov %1 = $r16\n"				\
+			  ";;\n"					\
+			  :"=r" (_sc_err),"=r" (_sc_res)		\
+                          : __syscall_input6				\
+			  : __syscall_clobber,"r22");			\
+	__syscall_return(type);						\
 }
 
 
-#define _syscall2(type,name,type1,arg1,type2,arg2) \
-type name(type1 arg1,type2 arg2) \
-{ \
-	unsigned long __res; \
-	__res = __syscall2((unsigned long)arg1,(unsigned long)arg2, \
-			   __NR_##name); \
-	__syscall_return(type,__res); \
-}
+#ifdef __KERNEL_SYSCALLS__
 
+static __inline__ _syscall3(int,execve,const char *,file,char **,argv,char **,envp)
 
-#define _syscall3(type,name,type1,arg1,type2,arg2,type3,arg3) \
-type name(type1 arg1,type2 arg2,type3 arg3) \
-{ \
-	unsigned long __res; \
-	__res = __syscall3((unsigned long)arg1, (unsigned long)arg2, \
-			(unsigned long)arg3, __NR_##name); \
-	__syscall_return(type,__res); \
-}
-
-#define _syscall4(type,name,type1,arg1,type2,arg2,type3,arg3,type4,arg4) \
-type name(type1 arg1,type2 arg2,type3 arg3,type4 arg4) \
-{ \
-	unsigned long __res; \
-	__res = __syscall4((unsigned long)arg1, (unsigned long)arg2, \
-			(unsigned long)arg3, (unsigned long)arg4, \
-			__NR_##name); \
-	__syscall_return(type,__res); \
-}
+#endif
 
 
 #ifdef __KERNEL__
@@ -317,29 +461,6 @@ type name(type1 arg1,type2 arg2,type3 ar
 
 #endif
 
-#ifdef __KERNEL_SYSCALLS__
-
-#define __NR__exit __NR_exit
-struct rusage;
-
-static inline _syscall0(pid_t,setsid)
-static inline _syscall3(int,write,int,fd,const char *,buf,off_t,count)
-static inline _syscall3(int,read,int,fd,char *,buf,off_t,count)
-static inline _syscall3(off_t,lseek,int,fd,off_t,offset,int,count)
-static inline _syscall1(int,dup,int,fd)
-static inline _syscall3(int,execve,const char *,file,char **,argv,char **,envp)
-static inline _syscall3(int,open,const char *,file,int,flag,int,mode)
-static inline _syscall1(int,close,int,fd)
-static inline _syscall1(int,_exit,int,exitcode)
-static inline _syscall4(pid_t,wait4,pid_t,pid,int *,wait_stat,int,options,struct rusage*, rusage)
-
-static inline pid_t
-waitpid (int pid, int *wait_stat, int flags)
-{
-	return wait4(pid, wait_stat, flags, NULL);
-}
-
-#endif	/* __KERNEL_SYSCALLS__ */
 
 #endif /* __ASSEMBLY__ */
 
