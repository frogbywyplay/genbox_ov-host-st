Patch from Denis Pilat <denis.pilat@st.com> to output the frame ID when stopping. This
allows some frontend update optimisations.

Signed-off-by: Chris Smith <chris.smith@st.com>
Index: gdb-6.5/gdb/stack.c
===================================================================
--- gdb-6.5.orig/gdb/stack.c	2006-03-30 17:37:13.000000000 +0100
+++ gdb-6.5/gdb/stack.c	2007-09-19 16:09:16.000000000 +0100
@@ -70,6 +70,13 @@
 int annotation_level = 0;
 
 
+int print_frame_id = 0;
+static void
+show_print_frame_id (struct ui_file *file, int from_tty,
+		    struct cmd_list_element *c, const char *value)
+{
+  fprintf_filtered (file, _("Display of the frame id when stepping is %s.\n"), value);
+}
 struct print_stack_frame_args
 {
   struct frame_info *frame;
@@ -674,12 +681,35 @@
 	}
     }
 
-  /* do_cleanups will call ui_out_tuple_end() for us.  */
-  do_cleanups (list_chain);
-  ui_out_text (uiout, "\n");
-  do_cleanups (old_chain);
-}
+
+  /* Print a string that represents the frame_id. This could be used by the UI
+     for comparison with the previous frame_id.
+     This is printed only on MI output for step stop reason and when the
+     "set print frame-id" command is on.  */
+  if (print_frame_id && ui_out_is_mi_like_p (uiout) && stop_step)
+    {
+      struct frame_id this_frame_id;
+      struct cleanup *frame_id_list_chain;
+
+      frame_id_list_chain = make_cleanup_ui_out_tuple_begin_end (uiout, "id");
+      this_frame_id= get_frame_id (frame);
+
+      ui_out_field_string (uiout, "stack", this_frame_id.stack_addr_p ?
+        paddr (this_frame_id.stack_addr) : "false");
+      ui_out_field_string (uiout, "code", this_frame_id.code_addr_p ?
+        paddr (this_frame_id.code_addr) : "false");
+      ui_out_field_string (uiout, "special", this_frame_id.special_addr_p ?
+        paddr (this_frame_id.special_addr) : "false");
+
+      do_cleanups (frame_id_list_chain);
+    }
+    /* do_cleanups will call ui_out_tuple_end() for us.  */
+    do_cleanups (list_chain);
+    ui_out_text (uiout, "\n");
+    do_cleanups (old_chain);
+}
 
+
 /* Show the frame info.  If this is the tui, it will be shown in the
    source display otherwise, nothing is done.  */
 
@@ -2037,4 +2067,15 @@
   add_info ("backtrace-limit", backtrace_limit_info, _("\
 The maximum number of frames for \"backtrace\" to print by default."));
 #endif
+
+  add_setshow_boolean_cmd ("frame-id", class_stack, &print_frame_id, _("\
+Set the frame id MI printing mode."), _("\
+Show the frame id MI printing mode."), _("\
+Set the printing of the frame ID into the MI output.\n\
+The frame id is printed only if stop reason is end-stepping-range."),
+			   NULL,
+			   show_print_frame_id,
+			   &setprintlist, &showprintlist);
+
+
 }
Index: gdb-6.5/gdb/testsuite/gdb.base/help.exp
===================================================================
--- gdb-6.5.orig/gdb/testsuite/gdb.base/help.exp	2007-09-18 17:03:26.000000000 +0100
+++ gdb-6.5/gdb/testsuite/gdb.base/help.exp	2007-09-19 16:09:16.000000000 +0100
@@ -536,7 +536,7 @@
 # vxgdb reads .vxgdbinit
 gdb_test "help source" "Read commands from a file named FILE\.\[\r\n\]+Optional -v switch \\(before the filename\\) causes each command in\[\r\n\]+FILE to be echoed as it is executed\.\[\r\n\]+Note that the file \"\[^\"\]*\" is read automatically in this way\[\r\n\]+when GDB is started\." "help source"
 # test help stack
-gdb_test "help stack" "Examining the stack\..*\[\r\n\]+When the program being debugged stops, gdb selects the innermost frame\.\[\r\n\]+The commands below can be used to select other frames by number or address\.\[\r\n\]+List of commands:\[\r\n\]+backtrace -- Print backtrace of all stack frames\[\r\n\]+bt -- Print backtrace of all stack frames\[\r\n\]+down -- Select and print stack frame called by this one\[\r\n\]+frame -- Select and print a stack frame\[\r\n\]+return -- Make selected stack frame return to its caller\[\r\n\]+select-frame -- Select a stack frame without printing anything\[\r\n\]+up -- Select and print stack frame that called this one\[\r\n\]+Type \"help\" followed by command name for full documentation\.\[\r\n\]+Command name abbreviations are allowed if unambiguous\." "help stack"
+gdb_test "help stack" "Examining the stack\..*\[\r\n\]+When the program being debugged stops, gdb selects the innermost frame\.\[\r\n\]+The commands below can be used to select other frames by number or address\.\[\r\n\]+List of commands:\[\r\n\]+backtrace -- Print backtrace of all stack frames\[\r\n\]+bt -- Print backtrace of all stack frames\[\r\n\]+down -- Select and print stack frame called by this one\[\r\n\]+frame -- Select and print a stack frame\[\r\n\]+return -- Make selected stack frame return to its caller\[\r\n\]+select-frame -- Select a stack frame without printing anything\[\r\n\]+set print frame-id -- Set the frame id MI printing mode\[\r\n\]+show print frame-id -- Show the frame id MI printing mode\[\r\n\]+up -- Select and print stack frame that called this one\[\r\n\]+Type \"help\" followed by command name for full documentation\.\[\r\n\]+Command name abbreviations are allowed if unambiguous\." "help stack"
 # test help status
 gdb_test "help status" "Status inquiries\.\[\r\n\]+List of commands:\[\r\n\]+info -- Generic command for showing things about the program being debugged.*\[\r\n\]+show -- Generic command for showing things about the debugger\[\r\n\]+Type \"help\" followed by command name for full documentation\.\[\r\n\]+Command name abbreviations are allowed if unambiguous\." "help status"
 
