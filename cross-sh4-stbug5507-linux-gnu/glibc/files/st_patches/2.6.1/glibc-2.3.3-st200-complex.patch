--- glibc/math/libm-test.inc	2004-07-20 08:06:32.000000000 +0100
+++ glibc-carl/math/libm-test.inc	2005-03-01 10:57:35.000000000 +0000
@@ -117,7 +117,9 @@
 #endif
 
 #include "libm-test-ulps.h"
+#ifndef __ST200__
 #include <complex.h>
+#endif
 #include <math.h>
 #include <float.h>
 #include <fenv.h>
@@ -174,6 +176,7 @@
 static FLOAT max_error, real_max_error, imag_max_error;
 
 
+#if 0
 #define BUILD_COMPLEX(real, imag) \
   ({ __complex__ FLOAT __retval;					      \
      __real__ __retval = (real);					      \
@@ -185,7 +188,7 @@
      __real__ __retval = (real);					      \
      __imag__ __retval = (imag);					      \
      __retval; })
-
+#endif
 
 #define MANT_DIG CHOOSE ((LDBL_MANT_DIG-1), (DBL_MANT_DIG-1), (FLT_MANT_DIG-1),  \
                          (LDBL_MANT_DIG-1), (DBL_MANT_DIG-1), (FLT_MANT_DIG-1))
@@ -272,6 +275,7 @@
 }
 
 
+#ifndef __ST200__
 static void
 print_complex_function_ulps (const char *function_name, FLOAT real_ulp,
 			     FLOAT imag_ulp)
@@ -298,6 +302,7 @@
 
     }
 }
+#endif
 
 
 
@@ -349,6 +354,7 @@
 }
 
 
+#ifndef __ST200__
 static void
 print_complex_max_error (const char *func_name, __complex__ FLOAT allowed,
 			 __complex__ int xfail)
@@ -383,7 +389,7 @@
 
   update_stats (ok, xfail);
 }
-
+#endif
 
 /* Test whether a given exception was raised.  */
 static void
@@ -539,6 +545,7 @@
 }
 
 
+#ifndef __ST200__
 static void
 check_complex (const char *test_name, __complex__ FLOAT computed,
 	       __complex__ FLOAT expected,
@@ -570,6 +577,7 @@
 			exception & IGNORE_ZERO_INF_SIGN,
 			&imag_max_error);
 }
+#endif
 
 
 /* Check that computed and expected values are equal (int values).  */
@@ -948,6 +956,7 @@
   END (atan2);
 }
 
+#ifndef __ST200__
 static void
 cabs_test (void)
 {
@@ -1448,6 +1457,7 @@
 
   END (catanh, complex);
 }
+#endif
 
 static void
 cbrt_test (void)
@@ -1477,6 +1487,7 @@
 }
 
 
+#ifndef __ST200__
 static void
 ccos_test (void)
 {
@@ -1612,7 +1623,7 @@
 
   END (ccosh, complex);
 }
-
+#endif /* __ST200__ */
 
 static void
 ceil_test (void)
@@ -1634,6 +1645,7 @@
 }
 
 
+#ifndef __ST200__
 static void
 cexp_test (void)
 {
@@ -1845,7 +1857,6 @@
   END (clog10, complex);
 }
 
-
 static void
 conj_test (void)
 {
@@ -1860,6 +1871,7 @@
 
   END (conj, complex);
 }
+#endif /* __ST200__ */
 
 
 static void
@@ -1948,6 +1960,7 @@
 }
 
 
+#ifndef __ST200__
 static void
 cpow_test (void)
 {
@@ -2219,8 +2232,8 @@
 static void
 ctan_test (void)
 {
-  errno = 0;
-  FUNC(ctan) (BUILD_COMPLEX (0.7L, 1.2L));
+  errno = ENOSYS;
+  //FUNC(ctan) (BUILD_COMPLEX (0.7L, 1.2L));
   if (errno == ENOSYS)
     /* Function not implemented.  */
     return;
@@ -2277,8 +2290,8 @@
 static void
 ctanh_test (void)
 {
-  errno = 0;
-  FUNC(ctanh) (BUILD_COMPLEX (0, 0));
+  errno = ENOSYS;
+  //FUNC(ctanh) (BUILD_COMPLEX (0, 0));
   if (errno == ENOSYS)
     /* Function not implemented.  */
     return;
@@ -2331,7 +2344,7 @@
 
   END (ctanh, complex);
 }
-
+#endif /* __ST200__ */
 
 static void
 erf_test (void)
@@ -3440,7 +3453,7 @@
 static void
 nextafter_test (void)
 {
-
+  FLOAT fltmax;
   START (nextafter);
 
   TEST_ff_f (nextafter, 0, 0, 0);
@@ -3457,7 +3470,7 @@
   TEST_ff_f (nextafter, 1.1L, nan_value, nan_value);
   TEST_ff_f (nextafter, nan_value, nan_value, nan_value);
 
-  FLOAT fltmax = CHOOSE (LDBL_MAX, DBL_MAX, FLT_MAX,
+  fltmax = CHOOSE (LDBL_MAX, DBL_MAX, FLT_MAX,
 			 LDBL_MAX, DBL_MAX, FLT_MAX);
   TEST_ff_f (nextafter, fltmax, plus_infty, plus_infty);
   TEST_ff_f (nextafter, -fltmax, minus_infty, minus_infty);
@@ -4580,6 +4593,7 @@
   /* Multiply and add:  */
   fma_test ();
 
+#ifndef __ST200__
   /* Complex functions:  */
   cabs_test ();
   cacos_test ();
@@ -4604,6 +4618,7 @@
   csqrt_test ();
   ctan_test ();
   ctanh_test ();
+#endif
 
   /* Bessel functions:  */
   j0_test ();
--- glibc/math/Makefile	2004-05-06 19:58:08.000000000 +0100
+++ glibc-carl/math/Makefile	2005-03-01 10:57:35.000000000 +0000
@@ -55,14 +55,18 @@
 	     w_log w_log10 w_pow w_remainder w_scalb w_sinh w_sqrt	\
 	     s_fpclassify s_fmax s_fmin s_fdim s_nan s_trunc		\
 	     s_remquo e_log2 e_exp2 s_round s_nearbyint s_sincos	\
-	     conj cimag creal cabs carg s_cexp s_csinh s_ccosh s_clog	\
-	     s_catan s_casin s_ccos s_csin s_ctan s_ctanh s_cacos	\
-	     s_casinh s_cacosh s_catanh s_csqrt s_cpow s_cproj s_clog10 \
 	     s_fma s_lrint s_llrint s_lround s_llround e_exp10 w_log2	\
 	     $(calls:s_%=m_%)
 
 include ../Makeconfig
 
+# clarkes: the following cannot be built due to the lack of complex support.
+#ifneq ($(no-complex-fcts),no)
+#libm-calls += conj cimag creal cabs carg s_cexp s_csinh s_ccosh s_clog	\
+#	     s_catan s_casin s_ccos s_csin s_ctan s_ctanh s_cacos	\
+#	     s_casinh s_cacosh s_catanh s_csqrt s_cpow s_cproj s_clog10
+#endif
+
 dbl-only-routines := branred doasin dosincos halfulp mpa mpatan2	\
 		     mpatan mpexp mplog mpsqrt mptan sincos32 slowexp	\
 		     slowpow
@@ -88,8 +92,8 @@
 
 # Rules for the test suite.
 tests = test-matherr test-fenv atest-exp atest-sincos atest-exp2 basic-test \
-	test-misc test-fpucw tst-definitions test-tgmath test-tgmath-ret \
-	bug-nextafter bug-nexttoward bug-tgmath1
+	test-misc test-fpucw tst-definitions test-tgmath 
+	
 # We do the `long double' tests only if this data type is available and
 # distinct from `double'.
 test-longdouble-yes = test-ldouble test-ildoubl
@@ -124,8 +128,8 @@
 $(objpfx)test-ildoubl.o: $(objpfx)libm-test.stmp
 endif
 
-CFLAGS-test-float.c = -fno-inline -ffloat-store -fno-builtin
-CFLAGS-test-double.c = -fno-inline -ffloat-store -fno-builtin
+CFLAGS-test-float.c = -ffloat-store -fno-builtin
+CFLAGS-test-double.c = -ffloat-store -fno-builtin
 CFLAGS-test-ldouble.c = -fno-inline -ffloat-store -fno-builtin
 CFLAGS-test-tgmath.c = -fno-builtin
 CFLAGS-test-tgmath-ret.c = -fno-builtin
--- glibc/math/test-fenv.c	2003-05-22 03:08:50.000000000 +0100
+++ glibc-carl/math/test-fenv.c	2005-03-01 10:57:35.000000000 +0000
@@ -24,7 +24,10 @@
 # define _GNU_SOURCE
 #endif
 
+#ifndef __ST200__
+/* [SC] Complex not supported on ST200. */
 #include <complex.h>
+#endif
 #include <math.h>
 #include <float.h>
 #include <fenv.h>
--- glibc/math/tgmath.h	2004-05-07 03:13:19.000000000 +0100
+++ glibc-carl/math/tgmath.h	2005-03-01 10:57:35.000000000 +0000
@@ -26,8 +26,10 @@
 
 /* Include the needed headers.  */
 #include <math.h>
+#ifndef __ST200__
+/* [SC] Complex not supported on ST200. */
 #include <complex.h>
-
+#endif
 
 /* Since `complex' is currently not really implemented in most C compilers
    and if it is implemented, the implementations differ.  This makes it
@@ -254,6 +256,59 @@
 
 /* Trigonometric functions.  */
 
+#ifdef __ST200__
+/* Arc cosine of X.  */
+#define acos(Val) __TGMATH_UNARY_REAL_ONLY (Val, acos)
+/* Arc sine of X.  */
+#define asin(Val) __TGMATH_UNARY_REAL_ONLY (Val, asin)
+/* Arc tangent of X.  */
+#define atan(Val) __TGMATH_UNARY_REAL_ONLY (Val, atan)
+/* Arc tangent of Y/X.  */
+#define atan2(Val1, Val2) __TGMATH_BINARY_REAL_ONLY (Val1, Val2, atan2)
+
+/* Cosine of X.  */
+#define cos(Val) __TGMATH_UNARY_REAL_ONLY (Val, cos)
+/* Sine of X.  */
+#define sin(Val) __TGMATH_UNARY_REAL_ONLY (Val, sin)
+/* Tangent of X.  */
+#define tan(Val) __TGMATH_UNARY_REAL_ONLY (Val, tan)
+
+
+/* Hyperbolic functions.  */
+
+/* Hyperbolic arc cosine of X.  */
+#define acosh(Val) __TGMATH_UNARY_REAL_ONLY (Val, acosh)
+/* Hyperbolic arc sine of X.  */
+#define asinh(Val) __TGMATH_UNARY_REAL_ONLY (Val, asinh)
+/* Hyperbolic arc tangent of X.  */
+#define atanh(Val) __TGMATH_UNARY_REAL_ONLY (Val, atanh)
+
+/* Hyperbolic cosine of X.  */
+#define cosh(Val) __TGMATH_UNARY_REAL_ONLY (Val, cosh)
+/* Hyperbolic sine of X.  */
+#define sinh(Val) __TGMATH_UNARY_REAL_ONLY (Val, sinh)
+/* Hyperbolic tangent of X.  */
+#define tanh(Val) __TGMATH_UNARY_REAL_ONLY (Val, tanh)
+
+
+/* Exponential and logarithmic functions.  */
+
+/* Exponential function of X.  */
+#define exp(Val) __TGMATH_UNARY_REAL_ONLY (Val, exp)
+
+/* Break VALUE into a normalized fraction and an integral power of 2.  */
+#define frexp(Val1, Val2) __TGMATH_BINARY_FIRST_REAL_ONLY (Val1, Val2, frexp)
+
+/* X times (two to the EXP power).  */
+#define ldexp(Val1, Val2) __TGMATH_BINARY_FIRST_REAL_ONLY (Val1, Val2, ldexp)
+
+/* Natural logarithm of X.  */
+#define log(Val) __TGMATH_UNARY_REAL_ONLY (Val, log)
+
+/* Base-ten logarithm of X.  */
+# define log10(Val) __TGMATH_UNARY_REAL_ONLY (Val, log10)
+
+#else
 /* Arc cosine of X.  */
 #define acos(Val) __TGMATH_UNARY_REAL_IMAG (Val, acos, cacos)
 /* Arc sine of X.  */
@@ -309,6 +364,8 @@
 # define log10(Val) __TGMATH_UNARY_REAL_ONLY (Val, log10)
 #endif
 
+#endif
+
 /* Return exp(X) - 1.  */
 #define expm1(Val) __TGMATH_UNARY_REAL_ONLY (Val, expm1)
 
@@ -328,10 +385,18 @@
 /* Power functions.  */
 
 /* Return X to the Y power.  */
+#ifdef __ST200__
+#define pow(Val1, Val2) __TGMATH_BINARY_REAL_ONLY (Val1, Val2, pow)
+#else
 #define pow(Val1, Val2) __TGMATH_BINARY_REAL_IMAG (Val1, Val2, pow, cpow)
+#endif
 
 /* Return the square root of X.  */
+#ifdef __ST200__
+#define sqrt(Val) __TGMATH_UNARY_REAL_ONLY (Val, sqrt)
+#else
 #define sqrt(Val) __TGMATH_UNARY_REAL_IMAG (Val, sqrt, csqrt)
+#endif
 
 /* Return `sqrt(X*X + Y*Y)'.  */
 #define hypot(Val1, Val2) __TGMATH_BINARY_REAL_ONLY (Val1, Val2, hypot)
@@ -346,7 +411,11 @@
 #define ceil(Val) __TGMATH_UNARY_REAL_ONLY (Val, ceil)
 
 /* Absolute value of X.  */
-#define fabs(Val) __TGMATH_UNARY_REAL_IMAG_RET_REAL (Val, fabs, cabs)
+#ifdef __ST200__
+#define fabs(Val) __TGMATH_UNARY_REAL_ONLY (Val, fabs)
+#else
+#define fabs(Val) __TGMATH_UNARY_REAL_IMAG (Val, fabs, cabs)
+#endif
 
 /* Largest integer not greater than X.  */
 #define floor(Val) __TGMATH_UNARY_REAL_ONLY (Val, floor)
@@ -439,21 +508,40 @@
 /* Absolute value, conjugates, and projection.  */
 
 /* Argument value of Z.  */
+#ifdef __ST200__
+#define carg(Val)
+#else
 #define carg(Val) __TGMATH_UNARY_REAL_IMAG_RET_REAL (Val, carg, carg)
+#endif
 
 /* Complex conjugate of Z.  */
+#ifdef __ST200__
+#define conj(Val)
+#else
 #define conj(Val) __TGMATH_UNARY_REAL_IMAG (Val, conj, conj)
+#endif
 
 /* Projection of Z onto the Riemann sphere.  */
+#ifdef __ST200__
+#define cproj(Val)
+#else
 #define cproj(Val) __TGMATH_UNARY_REAL_IMAG (Val, cproj, cproj)
-
+#endif
 
 /* Decomposing complex values.  */
 
 /* Imaginary part of Z.  */
+#ifdef __ST200__
+#define cimag(Val)
+#else
 #define cimag(Val) __TGMATH_UNARY_REAL_IMAG_RET_REAL (Val, cimag, cimag)
+#endif
 
 /* Real part of Z.  */
+#ifdef __ST200__
+#define creal(Val)
+#else
 #define creal(Val) __TGMATH_UNARY_REAL_IMAG_RET_REAL (Val, creal, creal)
+#endif
 
 #endif /* tgmath.h */
--- glibc/gnulib/tst-gcc.c	2001-07-06 05:54:46.000000000 +0100
+++ glibc-carl/gnulib/tst-gcc.c	2005-03-01 10:57:26.000000000 +0000
@@ -59,14 +59,18 @@
   int __integer_type;
   void *__pointer_type;
   double __real_type;
+#ifndef __ST200__
   __complex__ double __complex_type;
+#endif
   struct { int a; } __record_type;
   union { int a; int b; } __union_type;
 
   result |= TEST (integer);
   result |= TEST (pointer);
   result |= TEST (real);
+#ifndef __ST200__
   result |= TEST (complex);
+#endif
   result |= TEST (record);
   result |= TEST (union);
 
